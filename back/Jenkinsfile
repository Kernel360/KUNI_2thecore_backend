pipeline {
  agent any

  options {
    disableConcurrentBuilds()
    timestamps()
    buildDiscarder(logRotator(daysToKeepStr: '14', numToKeepStr: '20',
                              artifactDaysToKeepStr: '7', artifactNumToKeepStr: '10'))
    timeout(time: 30, unit: 'MINUTES')
  }

  environment {
    DEPLOY_HOST = '52.78.122.150'
    PEM_PATH    = '/var/lib/jenkins/.ssh/yeojin.pem'
    BUNDLE_DIR  = 'deploy'     // 배포 번들 작업 디렉토리
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          userRemoteConfigs: [[url: 'https://github.com/Kernel360/KUNI_2thecore_backend.git']],
          branches: [[name: '*/dev-Jenkins-test']]
        ])
      }
    }

    stage('Prepare known_hosts') {
      steps {
        sh '''
          set -e
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keygen -R ${DEPLOY_HOST} || true
          ssh-keyscan -H ${DEPLOY_HOST} >> ~/.ssh/known_hosts 2>/dev/null
          chmod 600 ~/.ssh/known_hosts
        '''
      }
    }

    stage('Build JARs (main, hub)') {
      steps {
        sh '''
          set -euo pipefail
          cd back

          # Gradle 워커/힙 제한(안정화)
          ./gradlew --no-daemon --max-workers=1 -Dorg.gradle.jvmargs="-Xms256m -Xmx1024m" \
            :main-server:bootJar -x test

          ./gradlew --no-daemon --max-workers=1 -Dorg.gradle.jvmargs="-Xms256m -Xmx1024m" \
            :hub-server:bootJar -x test
        '''
      }
    }

    stage('Assemble deploy bundle') {
      steps {
        // prod.env 를 Jenkins Credentials(Secret file)에서 가져와 번들에 포함
        withCredentials([file(credentialsId: '2thecore-env', variable: 'ENV_FILE')]) {
          sh '''
            set -euo pipefail

            # 깨끗한 번들 디렉터리 구성
            rm -rf ${BUNDLE_DIR}
            mkdir -p ${BUNDLE_DIR}/release/main-server
            mkdir -p ${BUNDLE_DIR}/release/hub-server

            # JAR 복사 (빌드 산출물 → release)
            cp back/main-server/build/libs/*.jar ${BUNDLE_DIR}/release/main-server/app.jar
            cp back/hub-server/build/libs/*.jar   ${BUNDLE_DIR}/release/hub-server/app.jar

            # 런타임용 Dockerfile 포함(레포의 Dockerfile을 번들 루트로 복사)
            cp back/main-server/Dockerfile ${BUNDLE_DIR}/Dockerfile.main
            cp back/hub-server/Dockerfile  ${BUNDLE_DIR}/Dockerfile.hub

            # docker-compose.yml
            cp back/docker/docker-compose.yml ${BUNDLE_DIR}/docker-compose.yml

            # prod.env 주입(Secret file)
            install -D -m 600 -T "$ENV_FILE" ${BUNDLE_DIR}/prod.env

            # 전달 아카이브 생성 (필요 파일만)
            tar -czf backend-bundle.tar -C ${BUNDLE_DIR} .
            echo "[OK] backend-bundle.tar 생성"
          '''
        }
      }
    }

    stage('Deploy to EC2 via SSH') {
      steps {
        sh '''
          # 번들 전송
          scp -o StrictHostKeyChecking=no -i ${PEM_PATH} backend-bundle.tar ubuntu@${DEPLOY_HOST}:~

          # 원격 배포
          ssh -o StrictHostKeyChecking=no -i ${PEM_PATH} ubuntu@${DEPLOY_HOST} 'bash -lc "
            set -euo pipefail
            rm -rf ~/backend-deploy && mkdir -p ~/backend-deploy
            tar -xzf ~/backend-bundle.tar -C ~/backend-deploy

            cd ~/backend-deploy

            # ===== 기존 컨테이너/네트워크 정리(이름 충돌 방지) =====
            docker rm -f 2thecore-redis 2thecore-rabbitmq 2thecore-hub 2thecore-main 2>/dev/null || true
            docker network rm backend-deploy_rabbitmq_net 2>/dev/null || true
            docker compose down --remove-orphans 2>/dev/null || true
            # =====================================================

            # 새로 빌드/실행
            docker compose --env-file ./prod.env up -d --build

            # 청소
            rm -f ~/backend-bundle.tar || true
          "'
        '''
      }
    }
  }

  post {
    always {
      sh '''
        set -e
        rm -f backend-bundle.tar || true
        rm -rf ${BUNDLE_DIR} || true
      '''
      echo "Pipeline finished."
    }
  }
}