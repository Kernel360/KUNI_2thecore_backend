pipeline {
  agent any
  options { timestamps() }

  environment {
    IMAGE_NAME = '2thecore-server'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM',
          userRemoteConfigs: [[url: 'https://github.com/Kernel360/KUNI_2thecore_backend.git']],
          branches: [[name: '*/dev-Jenkins-test']]
        ])
      }
    }

    stage('Build & Push Images') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'docker-hub-token',
            usernameVariable: 'DOCKERHUB_USER',
            passwordVariable: 'DOCKERHUB_TOKEN'
          ),
          file(credentialsId: '2thecore-env', variable: 'ENV_FILE')
        ]) {
          script { env.DOCKER_USER = DOCKERHUB_USER }
          withEnv(["IMAGE_REPO=${DOCKERHUB_USER}/${IMAGE_NAME}"]) {
            sh '''
              set -euo pipefail
              cd back

              # secret 파일 저장
              install -m600 "$ENV_FILE" prod.env

              # Docker 로그인
              echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin
              docker info | grep -i '^ Username' || true

              # main 이미지
              docker build -f main-server/Dockerfile -t "${IMAGE_REPO}:main" .
              docker push "${IMAGE_REPO}:main"

              # hub 이미지
              docker build -f hub-server/Dockerfile -t "${IMAGE_REPO}:hub" .
              docker push "${IMAGE_REPO}:hub"
            '''
          }
        }
      }
    }

    stage('Deploy to EC2 via SSH') {
      steps {
        withCredentials([
          usernamePassword(
            credentialsId: 'docker-hub-token',
            usernameVariable: 'DOCKERHUB_USER',
            passwordVariable: 'DOCKERHUB_TOKEN'
          )
        ]) {
          sh '''
            set -euo pipefail

            DEPLOY_HOST=ec2-43-203-191-246.ap-northeast-2.compute.amazonaws.com
            SSH_KEY=/var/lib/jenkins/.ssh/server_key
            REMOTE_DIR=/home/ubuntu/2thecore

            # Jenkins 에이전트 홈 기준 known_hosts 준비
            install -d -m700 "$HOME/.ssh"
            install -m644 /dev/null "$HOME/.ssh/known_hosts" || true
            SSH_OPTS="-o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=$HOME/.ssh/known_hosts"

            # 원격 디렉터리 보장
            ssh $SSH_OPTS -i "$SSH_KEY" ubuntu@"$DEPLOY_HOST" "mkdir -p $REMOTE_DIR"

            # 파일 전송
            scp $SSH_OPTS -i "$SSH_KEY" back/prod.env ubuntu@"$DEPLOY_HOST":"$REMOTE_DIR/prod.env"
            scp $SSH_OPTS -i "$SSH_KEY" docker-compose.yml ubuntu@"$DEPLOY_HOST":"$REMOTE_DIR/docker-compose.yml"

            # 원격 실행(환경변수 주입)
            ssh $SSH_OPTS -i "$SSH_KEY" \
              ubuntu@"$DEPLOY_HOST" \
              "DOCKER_USER=${DOCKERHUB_USER} IMAGE_NAME=${IMAGE_NAME} DOCKERHUB_USER=${DOCKERHUB_USER} DOCKERHUB_TOKEN=${DOCKERHUB_TOKEN} bash -s" <<'EOS'
set -xeuo pipefail

test -s /home/ubuntu/2thecore/prod.env

sudo mkdir -p /opt/2thecore
sudo mv /home/ubuntu/2thecore/prod.env /opt/2thecore/prod.env
sudo chown ubuntu:ubuntu /opt/2thecore/prod.env

cd /home/ubuntu/2thecore

echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USER" --password-stdin

docker-compose pull
docker-compose up -d

docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
EOS
          '''
        }
      }
    }
  }

  post {
    always { echo "Pipeline finished." }
  }
}